* Shell Slayer
A shell tutorial with a daemonic twist that uses Docker containers for
a stable environment.

* Running the Exercise
To simply run the tutorial you'll need to
1. [[https://docs.docker.com/engine/install/][Install Docker]] on your platform
2. Start Docker, often by running the "Docker Desktop" program,
3. Open a command terminal
   - Windows: ~cmd.exe~
   - MacOS: ~Terminal~ application
   - Linux: Your terminal emulator of choice
4. Run following command in your command line terminal
#+BEGIN_SRC sh
>> docker run -it --rm kauffman77/shellslayer
# Intel-based computers (e.g. most Windows / Linux machines)

>> docker run -it --rm --platform=linux/amd64 kauffman77/shellslayer
# ARM-based computers such as Apple M1 or M2 Macbooks
#+END_SRC
which will download a container (shell environment) and start the
exorcism... er exercise.

If you suspect that your version of the ShellSlayer container is out
of date, run the following command to update to the latest image.
#+BEGIN_SRC sh
>> docker image pull kauffman77/shellslayer
#+END_SRC
Then use one of the ~docker run~ commands above.

* Basic Commands for Use During the Exercise
The following are a short list of common Unix commands that will be
useful during the tutorial. Most good Unix tutorials will discuss more
detail on these but this short reference is worth knowing

|----------------+-----------------------------------------------------------------------------|
| Command        | Effect                                                                      |
|----------------+-----------------------------------------------------------------------------|
| ~cd dirA~      | Change the shells working directory (folder) to ~dirA~                      |
| ~cd~           | With no arguments change to the user home directory                         |
| ~ls~           | List the files that are in the current directory                            |
| ~ls -l~        | Do a long listing that shows additional information about files             |
| ~pwd~          | Print the working directory; shows what folder the shell is currently in    |
| ~cat file.txt~ | Print the contents of ~file.txt~ in the terminal                            |
|----------------+-----------------------------------------------------------------------------|
| Ctrl-l         | (Hold Ctrl key and press ~L~) Refresh the screen if it becomes distorted    |
| Up Arrow       | Recall previous commands; repeatedly press Up to go further back in history |
| Down Arrow     | Scroll back to more recent commands if in history                           |
| Ctrl-c         | (Hold Ctrl key and press ~C~) Interrupt a command and show the prompt       |
|----------------+-----------------------------------------------------------------------------|



* Building / Modifying the Exercise Container
The provided ~Makefile~ is barebones and oriented towards Linux but
allows slightly quicker builds / runs during development. Type ~make
help~ to get the basics.

#+BEGIN_SRC sh
>> make help
Typical usage is:
   >> make build  # use `docker build` to update the local container
   >> make run    # run the local version of the container
   >> make push   # push the current local copy to DockerHub

Pushes will go to:
   kauffman77/shellslayer:latest
Make sure that's your username / repo on DockerHub if you plan to push
#+END_SRC

Some of the sources are in the top-level directory while many of the
setup files including the main ~setup.py~ file are in ~setup-files~
subdirectory.

A typical development cycle might add a new level as a subdirectory to
~setup-files/~, modify the ~setup.py~ program to create the phase
during tutorial startup, the do a ~make build~ followed by ~make run~
to test it.

Some design notes and TODO items are in the ~NOTES.org~ file for those
interested in contributing.
